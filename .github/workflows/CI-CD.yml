name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

jobs:
  ci-cd:
    name: Build, Test, Analyze & Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout du code source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Setup JDK 17 pour le backend
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Setup Node.js 18 pour le frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      # 4. Build et test du backend avec Jacoco
      - name: Backend - Build and Test
        working-directory: back
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          mvn clean install -DskipTests=true
          mvn test jacoco:report

      # 5. Build et test du frontend
      - name: Frontend - Install dependencies
        working-directory: front
        run: npm ci

      - name: Frontend - Run tests with coverage
        working-directory: front
        env:
          CI: true
        run: npm run test:ci

      # 6. Analyse SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=emysim_BobApp
            -Dsonar.organization=emysim
            -Dsonar.java.libraries=back/target/*.jar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 7. Vérification du Quality Gate SonarCloud
      - name: SonarCloud Quality Gate Check
        id: qualitygate
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 8. Déploiement Docker si Quality Gate OK
      - name: Build & Push Docker Images
        if: steps.qualitygate.outputs.passed == 'true'
        run: |
          echo "Quality Gate OK, déploiement Docker..."
          docker login -u $DOCKERHUB_USERNAME -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t $BACKEND_IMAGE:latest ./back
          docker push $BACKEND_IMAGE:latest
          docker build -t $FRONTEND_IMAGE:latest ./front
          docker push $FRONTEND_IMAGE:latest

      # 9. Résumé du déploiement
      - name: Deployment Summary
        if: steps.qualitygate.outputs.passed == 'true'
        run: |
          echo "Déploiement réussi !"
          echo "Backend Image: $BACKEND_IMAGE:latest"
          echo "Frontend Image: $FRONTEND_IMAGE:latest"

      # 10. Echec Quality Gate
      - name: Quality Gate Failed
        if: steps.qualitygate.outputs.passed != 'true'
        run: |
          echo "Quality Gate non validé, déploiement annulé."
          exit 1