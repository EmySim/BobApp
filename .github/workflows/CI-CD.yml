name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

# =====================================================
# JOBS
# =====================================================
jobs:
  # ======================
  # BACKEND BUILD
  # ======================
  backend-build:
    name: Backend - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Build Backend
        working-directory: back
        run: mvn -B clean package -DskipTests

  # ======================
  # BACKEND TEST
  # ======================
  backend-test:
    name: Backend - Test & Coverage
    runs-on: ubuntu-latest
    needs: backend-build
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Run Tests with JaCoCo
        working-directory: back
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: mvn test jacoco:report

      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: back/target/site/jacoco/
          retention-days: 7

  # ======================
  # FRONTEND BUILD
  # ======================
  frontend-build:
    name: Frontend - Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: front/package-lock.json

      - name: Install Dependencies
        working-directory: front
        run: npm ci

      - name: Build Frontend
        working-directory: front
        run: npm run build

  # ======================
  # FRONTEND TEST
  # ======================
  frontend-test:
    name: Frontend - Test & Coverage
    runs-on: ubuntu-latest
    needs: frontend-build
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: front/package-lock.json

      - name: Install Dependencies
        working-directory: front
        run: npm ci

      - name: Run Tests with Coverage
        working-directory: front
        env:
          CI: true
        run: npm run test:ci

      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage/
          retention-days: 7

  # ======================
  # SONAR ANALYSIS + QUALITY GATE
  # ======================
  sonar:
    name: SonarCloud Analysis & Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    outputs:
      gate-status: ${{ steps.qualitygate.outputs.status }}

    steps:
      - uses: actions/checkout@v4

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v5.0.0
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=emysim_BobApp
            -Dsonar.organization=emysim
            -Dsonar.java.libraries=back/target/*.jar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for Sonar Quality Gate
        id: qualitygate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="emysim_BobApp"
          # Récupérer l'ID de la dernière analyse
          ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/ce/component?component=$PROJECT_KEY" | jq -r '.queue[0].id')
          echo "Analyse ID: $ANALYSIS_ID"

          # Attendre que l’analyse soit terminée
          for i in {1..30}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/ce/task?id=$ANALYSIS_ID" | jq -r '.task.status')
            echo "Statut Sonar: $STATUS"
            if [ "$STATUS" == "SUCCESS" ]; then break; fi
            sleep 5
          done

          # Vérifier le Quality Gate
          QUALITY_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QUALITY_STATUS"
          echo "::set-output name=status::$QUALITY_STATUS"

          if [ "$QUALITY_STATUS" != "OK" ]; then
            echo "Quality Gate failed. Stopping pipeline."
            exit 1
          fi

  # ======================
  # DEPLOY (only if quality gate OK)
  # ======================
  deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [sonar]
    if: needs.sonar.outputs.gate-status == 'OK'

    steps:
      - uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u $DOCKERHUB_USERNAME --password-stdin

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./back
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./front
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deployment Summary
        run: |
          echo "Déploiement réussi !!"
          echo "Backend: $BACKEND_IMAGE:latest"
          echo "Frontend: $FRONTEND_IMAGE:latest"
