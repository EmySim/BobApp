name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

# =====================================================
# JOBS
# =====================================================
jobs:
  # ======================
  # BACKEND : BUILD + TEST
  # ======================
  backend:
    name: Backend - Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "maven"

      - name: Build & Test with Coverage
        working-directory: back
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: mvn -B clean package jacoco:report

      - name: Upload Backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: back/target/*.jar
          retention-days: 1

      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: back/target/site/jacoco/
          retention-days: 7

  # ======================
  # FRONTEND : BUILD + TEST
  # ======================
  frontend:
    name: Frontend - Build & Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: front/package-lock.json

      - name: Install Dependencies
        working-directory: front
        run: npm ci

      - name: Build Frontend
        working-directory: front
        run: npm run build

      - name: Upload Frontend Build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: front/dist/
          retention-days: 1

      - name: Run Tests with Coverage
        working-directory: front
        env:
          CI: true
        run: npm run test:ci

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/
          retention-days: 7

  # ======================
  # SONAR ANALYSIS + QUALITY GATE
  # ======================
  sonar:
    name: SonarCloud Analysis & Quality Gate
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    outputs:
      gate-status: ${{ steps.qualitygate.outputs.status }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: back/target/

      - name: Download Backend Coverage
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: back/target/site/jacoco/

      - name: Download Frontend Coverage
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: front/coverage/

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=emysim_BobApp
            -Dsonar.organization=emysim
            -Dsonar.java.binaries=back/target/classes
            -Dsonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml
            -Dsonar.javascript.lcov.reportPaths=front/coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Wait for Quality Gate
        id: qualitygate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="emysim_BobApp"
          
          TASK_ID=$(curl -s -u $SONAR_TOKEN: \
            "https://sonarcloud.io/api/ce/component?component=$PROJECT_KEY" \
            | jq -r '.current.id // .queue[0].id')
          
          echo "Task ID: $TASK_ID"

          for i in {1..60}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: \
              "https://sonarcloud.io/api/ce/task?id=$TASK_ID" \
              | jq -r '.task.status')
            
            echo "Statut Sonar: $STATUS (tentative $i/60)"
            
            if [ "$STATUS" == "SUCCESS" ]; then
              break
            elif [ "$STATUS" == "FAILED" ] || [ "$STATUS" == "CANCELED" ]; then
              echo "Analyse Sonar √©chou√©e avec le statut: $STATUS"
              exit 1
            fi
            
            sleep 5
          done

          QUALITY_STATUS=$(curl -s -u $SONAR_TOKEN: \
            "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" \
            | jq -r '.projectStatus.status')
          
          echo "Quality Gate Status: $QUALITY_STATUS"
          echo "status=$QUALITY_STATUS" >> $GITHUB_OUTPUT

          if [ "$QUALITY_STATUS" != "OK" ]; then
            echo "(‚ï•Ôπè‚ï•) Quality Gate √©chou√©e. Pipeline arr√™t√©."
            exit 1
          fi
          
          echo "	·ï¶( Õ°¬∞ Õú ñ Õ°¬∞)·ï§ Quality Gate valid√©e !"

  # ======================
  # DEPLOY
  # ======================
  deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [backend, frontend, sonar]
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      needs.sonar.outputs.gate-status == 'OK'

    steps:
      - uses: actions/checkout@v4

      - name: Download Backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: back/target/

      - name: Download Frontend Build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: front/dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v6
        with:
          context: ./back
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Frontend Image
        uses: docker/build-push-action@v6
        with:
          context: ./front
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deployment Summary
        run: |
          echo "üöÄ D√©ploiement r√©ussi !"
          echo "üì¶ Backend: $BACKEND_IMAGE:latest"
          echo "üì¶ Frontend: $FRONTEND_IMAGE:latest"
          echo "üîñ Commit: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"
