name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

jobs:
  ci-cd:
    name: Build, Test, Analyze & Deploy
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout du code source
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

 # --- Configuration des environnements ---

      # 2. Setup JDK 17 pour le backend
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Setup Node.js 18 pour le frontend
      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      # 4. Cache Node modules
      - name: Cache Node modules
        uses: actions/cache@v4.1.1
        with:
          path: front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

# --- Préparation et Tests du Monorepo ---

      # 5. Build et test du backend avec Jacoco
      - name: Backend - Build and Test
        working-directory: back
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          mvn clean install -DskipTests=true
          mvn test jacoco:report

      # 6. Build et test du frontend
      - name: Frontend - Install dependencies
        working-directory: front
        run: npm ci

      - name: Frontend - Run tests with coverage
        working-directory: front
        env:
          CI: true
        run: npm run test:ci

# --- Analyse de Qualité ---

      # 7. Analyse SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v4
        with:
          projectBaseDir: "."
          args: >
            -Dsonar.projectKey=emysim_BobApp
            -Dsonar.organization=emysim
            -Dsonar.java.libraries=back/target/*.jar
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 8. Installer jq pour le parsing JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 9. Vérification du Quality Gate SonarCloud via l'API
      - name: SonarCloud Quality Gate Check
        id: qualitygate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          PROJECT_KEY="emysim_BobApp"
          ANALYSIS_ID=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/ce/component?component=$PROJECT_KEY" | jq -r '.queue[0].id')
          for i in {1..30}; do
            STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/ce/task?id=$ANALYSIS_ID" | jq -r '.task.status')
            if [ "$STATUS" == "SUCCESS" ]; then
              break
            fi
            sleep 5
          done
          QUALITY_GATE_STATUS=$(curl -s -u $SONAR_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?projectKey=$PROJECT_KEY" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $QUALITY_GATE_STATUS"
          echo "::set-output name=passed::$QUALITY_GATE_STATUS"
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            exit 1
          fi

      # 10. Déploiement Docker si Quality Gate OK
      - name: Build & Push Docker Images
        if: steps.qualitygate.outputs.passed == 'OK'
        run: |
          echo "Quality Gate OK, déploiement Docker..."
          docker login -u $DOCKERHUB_USERNAME -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t $BACKEND_IMAGE:latest ./back
          docker push $BACKEND_IMAGE:latest
          docker build -t $FRONTEND_IMAGE:latest ./front
          docker push $FRONTEND_IMAGE:latest

      # 11. Résumé du déploiement
      - name: Deployment Summary
        if: steps.qualitygate.outputs.passed == 'OK'
        run: |
          echo "Déploiement réussi !"
          echo "Backend Image: $BACKEND_IMAGE:latest"
          echo "Frontend Image: $FRONTEND_IMAGE:latest"

      # 12. Echec Quality Gate
      - name: Quality Gate Failed
        if: steps.qualitygate.outputs.passed != 'OK'
        run: |
          echo "Quality Gate non validée, déploiement annulé."
          exit 1