name: Docker Build & Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_run:
    workflows: ["Build, Test & Coverage Analysis"]
    types:
      - completed
    branches:
      - main
      - develop

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

jobs:
  docker-deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    # Ne déploie que si les tests sont passés avec succès
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      # 1️⃣ Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2️⃣ Configuration Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3️⃣ Connexion à Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4️⃣ Génération des métadonnées pour Backend
      - name: Extract metadata for Backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # 5️⃣ Génération des métadonnées pour Frontend
      - name: Extract metadata for Frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      # 6️⃣ Build et Push Backend
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 7️⃣ Build et Push Frontend
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # 8️⃣ Test des images déployées
      - name: Test Backend Image
        run: |
          echo "🧪 Testing backend image..."
          docker run --rm --name test-backend -d -p 8080:8080 ${{ env.BACKEND_IMAGE }}:latest
          sleep 30

          # Test de santé de l'API
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/api/joke || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ Backend health check passed"
          else
            echo "❌ Backend health check failed (HTTP $response)"
            docker logs test-backend
            exit 1
          fi

          docker stop test-backend

      - name: Test Frontend Image
        run: |
          echo "🧪 Testing frontend image..."
          docker run --rm --name test-frontend -d -p 4200:80 ${{ env.FRONTEND_IMAGE }}:latest
          sleep 10

          # Test de santé du frontend
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4200 || echo "000")
          if [ "$response" = "200" ]; then
            echo "✅ Frontend health check passed"
          else
            echo "❌ Frontend health check failed (HTTP $response)"
            docker logs test-frontend
            exit 1
          fi

          docker stop test-frontend

      # 9️⃣ Mise à jour du docker-compose pour production
      - name: Generate Production Docker Compose
        run: |
          echo "📝 Generating production docker-compose.yml..."
          cat > docker-compose.prod.yml << EOF
          version: '3.8'

          services:
            backend:
              image: ${{ env.BACKEND_IMAGE }}:latest
              container_name: bobapp-backend-prod
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - JWT_SECRET=\${{ secrets.JWT_SECRET }}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/joke"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              restart: unless-stopped

            frontend:
              image: ${{ env.FRONTEND_IMAGE }}:latest
              container_name: bobapp-frontend-prod
              ports:
                - "80:80"
              depends_on:
                backend:
                  condition: service_healthy
              restart: unless-stopped

          networks:
            default:
              name: bobapp-network-prod
          EOF

          echo "✅ Production docker-compose.yml created"

      # 🔟 Notification de succès avec toutes les infos
      - name: Deployment Summary
        run: |
          echo "🚀 DEPLOYMENT SUCCESSFUL! 🚀"
          echo "=================================="
          echo "Backend Image: ${{ env.BACKEND_IMAGE }}:latest"
          echo "Frontend Image: ${{ env.FRONTEND_IMAGE }}:latest"
          echo ""
          echo "📦 Backend Tags:"
          echo "${{ steps.backend-meta.outputs.tags }}"
          echo ""
          echo "📦 Frontend Tags:"
          echo "${{ steps.frontend-meta.outputs.tags }}"
          echo ""
          echo "🔗 Docker Hub URLs:"
          echo "Backend: https://hub.docker.com/r/emysim/bobapp-backend"
          echo "Frontend: https://hub.docker.com/r/emysim/bobapp-frontend"
          echo ""
          echo "🚀 To run locally:"
          echo "docker-compose -f docker-compose.prod.yml up -d"

      # 1️⃣1️⃣ Upload du compose de production
      - name: Upload Production Compose
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-production
          path: docker-compose.prod.yml
          retention-days: 30
