name: Docker Build & Deploy

on:
  push:
    branches:
      - main
      - develop
  workflow_run:
    workflows: ["Build, Test & Coverage Analysis"]
    types:
      - completed
    branches:
      - main
      - develop

env:
  DOCKERHUB_USERNAME: emysim
  BACKEND_IMAGE: emysim/bobapp-backend
  FRONTEND_IMAGE: emysim/bobapp-frontend

jobs:
  docker-deploy:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    # Le déploiement se fait uniquement si le workflow de tests (Build, Test & Coverage Analysis) a réussi
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- Métadonnées et tags Docker (pour les tags 'latest', par branche, etc.) ---
      - name: Extract metadata for Backend
        id: backend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      - name: Extract metadata for Frontend
        id: frontend-meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest

      # --- 1. Construction et Envoi de l'image Backend sur Docker Hub ---
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ steps.backend-meta.outputs.tags }}
          labels: ${{ steps.backend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # --- 2. Construction et Envoi de l'image Frontend sur Docker Hub ---
      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ steps.frontend-meta.outputs.tags }}
          labels: ${{ steps.frontend-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # --- 3. Test d'Intégration des Images (Correction de l'erreur Nginx) ---
      - name: Integration Test and Health Check
        run: |
          echo "🌐 Setting up test network and containers..."
          
          # 1. Créer un réseau temporaire pour simuler l'environnement Docker Compose
          NETWORK_NAME="test-ci-network"
          docker network create $NETWORK_NAME || true
          
          # 2. Démarrer le Backend. Le conteneur DOIT être nommé 'bobapp-backend'
          echo "🚀 Starting backend container (bobapp-backend)..."
          docker rm -f bobapp-backend || true
          docker run --name bobapp-backend -d --network $NETWORK_NAME ${{ env.BACKEND_IMAGE }}:latest
          
          # 3. Attendre la santé du Backend
          echo "⏳ Waiting for backend to be healthy..."
          BACKEND_HEALTHY=0
          for i in {1..40}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://bobapp-backend:8080/api/joke || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Backend health check passed (HTTP $response)"
              BACKEND_HEALTHY=1
              break
            fi
            sleep 3
          done
          
          if [ "$BACKEND_HEALTHY" -eq 0 ]; then
            echo "❌ Backend health check failed."
            docker logs bobapp-backend
            # Nettoyage en cas d'échec
            docker rm -f bobapp-backend || true
            docker network rm $NETWORK_NAME || true
            exit 1
          fi
          
          # 4. Démarrer le Frontend sur le même réseau. Nginx peut désormais résoudre 'bobapp-backend'.
          echo "🚀 Starting frontend container (test-frontend)..."
          docker rm -f test-frontend || true
          docker run --name test-frontend -d -p 8082:80 --network $NETWORK_NAME ${{ env.FRONTEND_IMAGE }}:latest
          
          # 5. Attendre la santé du Frontend (vérification de la page d'accueil via localhost)
          echo "⏳ Waiting for frontend to be accessible..."
          FRONTEND_HEALTHY=0
          for i in {1..30}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8082 || echo "000")
            if [ "$response" = "200" ]; then
              echo "✅ Frontend health check passed (HTTP $response)"
              FRONTEND_HEALTHY=1
              break
            fi
            sleep 2
          done
          
          # 6. Nettoyage
          echo "🧹 Cleaning up containers and network..."
          docker stop test-frontend bobapp-backend || true
          docker rm test-frontend bobapp-backend || true
          docker network rm $NETWORK_NAME || true
          
          if [ "$FRONTEND_HEALTHY" -eq 0 ]; then
            echo "❌ Frontend health check failed (HTTP $response)"
            exit 1
          fi

      # --- 4. Génération de docker-compose.prod.yml ---
      - name: Generate Production Docker Compose
        run: |
          echo "📝 Generating production docker-compose.yml..."
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.BACKEND_IMAGE }}:latest
              container_name: bobapp-backend-prod
              ports:
                - "8080:8080"
              environment:
                - SPRING_PROFILES_ACTIVE=docker
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/api/joke"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              restart: unless-stopped
          
            frontend:
              image: ${{ env.FRONTEND_IMAGE }}:latest
              container_name: bobapp-frontend-prod
              ports:
                - "80:80"
              depends_on:
                backend:
                  condition: service_healthy
              restart: unless-stopped
          
          networks:
            default:
              name: bobapp-network-prod
          EOF
          
          echo "✅ Production docker-compose.yml created"

      - name: Deployment Summary
        run: |
          echo "🚀 DEPLOYMENT SUCCESSFUL! 🚀"
          echo "=================================="
          echo "Backend Image: ${{ env.BACKEND_IMAGE }}:latest"
          echo "Frontend Image: ${{ env.FRONTEND_IMAGE }}:latest"
          echo ""
          echo "🔗 Docker Hub URLs:"
          echo "Backend: https://hub.docker.com/r/emysim/bobapp-backend"
          echo "Frontend: https://hub.docker.com/r/emysim/bobapp-frontend"
          echo ""
          echo "🚀 To run locally:"
          echo "docker-compose -f docker-compose.prod.yml up -d"

      - name: Upload Production Compose
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose-production
          path: docker-compose.prod.yml
          retention-days: 30