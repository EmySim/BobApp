name: Build, Test & SonarCloud Quality Analysis

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-analysis:
    name: Quality Analysis with SonarCloud
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code with full history for SonarCloud
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history needed for blame information

      # 2Ô∏è‚É£ Setup Java (JDK 17 for SonarQube scanner)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # 3Ô∏è‚É£ Setup Node.js for Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'front/package-lock.json'

      # 4Ô∏è‚É£ Cache SonarCloud packages
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      # 5Ô∏è‚É£ Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/back/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # 6Ô∏è‚É£ Backend: Build and Test with Coverage
      - name: Backend - Build and Test with Jacoco Coverage
        working-directory: back
        env:
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          echo "üî® Building backend..."
          mvn clean compile
          
          echo "üß™ Running backend tests with coverage..."
          mvn test jacoco:report
          
          echo "üìä Backend coverage generated!"
          if [ -f "target/site/jacoco/jacoco.xml" ]; then
            echo "‚úÖ Jacoco XML report found"
          else
            echo "‚ùå Jacoco XML report missing"
            exit 1
          fi

      # 7Ô∏è‚É£ Frontend: Install dependencies and test with coverage
      - name: Frontend - Install dependencies
        working-directory: front
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci

      - name: Frontend - Run tests with coverage
        working-directory: front
        env:
          CI: true
        run: |
          echo "üß™ Running frontend tests with coverage..."
          npm run test:ci
          
          echo "üìä Frontend coverage generated!"
          if [ -f "coverage/bobapp/lcov.info" ]; then
            echo "‚úÖ LCOV report found"
          else
            echo "‚ùå LCOV report missing"
            exit 1
          fi

      # 8Ô∏è‚É£ Verify SonarCloud Prerequisites
      - name: Verify SonarCloud Prerequisites
        run: |
          echo "üîç Checking SonarCloud prerequisites..."
          
          # Check backend coverage
          if [ -f "back/target/site/jacoco/jacoco.xml" ]; then
            echo "‚úÖ Backend coverage: READY"
          else
            echo "‚ùå Backend coverage: MISSING"
          fi
          
          # Check frontend coverage
          if [ -f "front/coverage/bobapp/lcov.info" ]; then
            echo "‚úÖ Frontend coverage: READY"
          else
            echo "‚ùå Frontend coverage: MISSING"
          fi
          
          # Check sonar-project.properties
          if [ -f "sonar-project.properties" ]; then
            echo "‚úÖ SonarCloud config: READY"
            echo "üìÑ Configuration preview:"
            head -10 sonar-project.properties
          else
            echo "‚ùå SonarCloud config: MISSING"
          fi

      # 9Ô∏è‚É£ SonarCloud Analysis
      - name: SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}     # SonarCloud authentication
        run: |
          echo "üîç Starting SonarCloud analysis..."
          
          # Use SonarScanner CLI for better control
          npx sonar-scanner \
            -Dsonar.projectKey=EmySim_BobApp \
            -Dsonar.organization=emysim \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.sources=back/src/main,front/src \
            -Dsonar.tests=back/src/test,front/src \
            -Dsonar.java.binaries=back/target/classes \
            -Dsonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml \
            -Dsonar.javascript.lcov.reportPaths=front/coverage/bobapp/lcov.info \
            -Dsonar.typescript.lcov.reportPaths=front/coverage/bobapp/lcov.info \
            -Dsonar.junit.reportPaths=back/target/surefire-reports \
            -Dsonar.qualitygate.wait=true

      # üîü Upload Coverage Reports as Artifacts
      - name: Upload Backend Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-report
          path: back/target/site/jacoco/
          retention-days: 30

      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage-report
          path: front/coverage/bobapp/
          retention-days: 30

      # 1Ô∏è‚É£1Ô∏è‚É£ Quality Gate Status
      - name: Quality Gate Status
        run: |
          echo "üéØ SonarCloud Quality Gate completed!"
          echo "üìä View detailed results at: https://sonarcloud.io/project/overview?id=EmySim_BobApp"